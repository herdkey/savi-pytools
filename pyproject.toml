[project]
name = "savi-pytools"
version = "1.0.0"
requires-python = ">=3.13"

[project.scripts]
savipy_hello = 'savipy.hello_world:main'


################################################################################
#                                    poetry                                    #
################################################################################

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
packages = [
    { include = "savipy", from = "src" }
]

[tool.poetry.dependencies]
python = ">=3.13,<4"


################################################################################
#                                    pytest                                    #
################################################################################

[tool.pytest.ini_options]
pythonpath = ["tests"]
# This import-mode is recommended by pytest
# https://docs.pytest.org/en/stable/explanation/goodpractices.html#tests-outside-application-code
# The -s flag is to print output to stdout
addopts = ["--import-mode=importlib", "-s"]
# Default to running unit tests only
testpaths = ["tests/savipy_test/unit"]
# formatting logs for pytest-html
log_format = "[%(asctime)s] (%(process)d %(threadName)s) %(levelname)s $(filename)s:%(lineno)d | %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"

[dependency-groups]
dev = [
    "ruff (>=0.13.2,<0.14.0)",
    "mypy (>=1.11.0,<2.0.0)",
    "pyright (>=1.1.405,<2.0.0)",
]


################################################################################
#                                     Ruff                                     #
################################################################################

[tool.ruff]
target-version = "py313"
line-length = 88
src = ["src"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RSE",  # raise-related checks (e.g., unnecessary parens on raise)
    "PT",   # pytest style (e.g., @pytest.fixture() â†’ @pytest.fixture)
    "UP034",    # extraneous-parentheses
]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["E501"]  # Allow longer lines in tests

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"


################################################################################
#                                     mypy                                     #
################################################################################

[tool.mypy]
# Ultra-strict configuration
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_no_return = true
strict_equality = true
extra_checks = true

# Paths
mypy_path = "src"
packages = ["savipy"]


################################################################################
#                                   pyright                                    #
################################################################################

[tool.pyright]
# Strict configuration
include = ["src"]
exclude = ["**/__pycache__"]
typeCheckingMode = "strict"
pythonVersion = "3.13"
pythonPlatform = "All"

# Strict type checking options
reportMissingImports = "error"
reportMissingTypeStubs = "error"
reportMissingParameterType = "error"
reportMissingTypeArguments = "error"
reportMissingReturnType = "error"
reportUnknownParameterType = "error"
reportUnknownVariableType = "error"
reportUnknownMemberType = "error"
reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportImplicitStringConcatenation = "error"
reportUndefinedVariable = "error"
reportAssertAlwaysTrue = "error"
reportSelfClsParameterName = "error"
reportImplicitOverride = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportOverlappingOverload = "error"
